use litcontainers::*;
use litdsp::{filters, constants};

#[test]
pub fn firls() {
	let fac = 2.;
	let f = RowVec::from_vec(Size::new(U1, U4), &[0., 1. / fac, 1. / fac, 1.]);
	let a = RowVec::from_vec(Size::new(U1, U4), &[1., 1., 0., 0.]);
	let n = U40;

	let h = filters::firls(n, f, a);
	let target = &[
		-0.00000000000000001949085916259688, -0.016753151904410037, 0.000000000000000019490859162596877,
		0.018724110951987685, -0.000000000000000019490859162596877, -0.02122065907891938,
		0.000000000000000019490859162596877, 0.024485375860291588, -0.000000000000000019490859162596877,
		-0.028937262380344612, 0.00000000000000001949085916259688, 0.0353677651315323,
		-0.000000000000000019490859162596877, -0.04547284088339867, 0.000000000000000019490859162596877,
		0.06366197723675814, -0.000000000000000019490859162596877, -0.1061032953945969,
		0.000000000000000019490859162596877, 0.3183098861837907, 0.5, 0.3183098861837907,
		0.000000000000000019490859162596877, -0.1061032953945969, -0.000000000000000019490859162596877,
		0.06366197723675814, 0.000000000000000019490859162596877, -0.04547284088339867,
		-0.000000000000000019490859162596877, 0.0353677651315323, 0.00000000000000001949085916259688,
		-0.028937262380344612, -0.000000000000000019490859162596877, 0.024485375860291588,
		0.000000000000000019490859162596877, -0.02122065907891938, -0.000000000000000019490859162596877,
		0.018724110951987685, 0.000000000000000019490859162596877, -0.016753151904410037,
		-0.00000000000000001949085916259688,
	];
	for (o, t) in h.as_iter().zip(target.iter()) {
		assert!((o - t).abs() < constants::EPSILON)
	}

	//println!("{}", h)
}